<?xml version="1.0" encoding="UTF-8"?>
<!--원본 <!DOCTYPE log4j:configuration PUBLIC "-//APACHE//DTD LOG4J 1.2//EN" "log4j.dtd">
 -->
<!DOCTYPE log4j:configuration SYSTEM "http://logging.apache.org/log4j/1.2/apidocs/org/apache/log4j/xml/doc-files/log4j.dtd">
<log4j:configuration xmlns:log4j="http://jakarta.apache.org/log4j/">

	<!-- Appenders
	appender요소는 전달받은 로그 정보를  출력할 위치(console,db,파일)를 결정하는 클래스
	ConsoleAppender클래스는   console에 로그정보를 출력
	 -->
	<!-- layout요소는 로그 정보의 출력패턴을 설정  
	PatternLayout클래스는 로그정보를 사용자가 설정한 패턴에 따라 기록--> 
	 
	<appender name="console" class="org.apache.log4j.ConsoleAppender">
		<param name="Target" value="System.out" /><!-- 콘솔에 출력 -->
		<layout class="org.apache.log4j.PatternLayout">
			<!--원본 <param name="ConversionPattern" value="%-5p: %c - %m%n" /> -->
			<!--%d: 로깅이벤트가 발생한 시간. 여기에서 yyyy-MM-dd HH:mm:ss형식으로 설정
				%c: 카테고리
				%C: 클래스명 
				%F: 로깅이 발생한 파일명
				%L: 로깅이 발생한 코드 라인수
				%m: 로그내용
				%n: 줄바꿈.개행  등-->
			<param name="ConversionPattern" value="%d{yyyy-MM-dd HH:mm:ss} %-5p %c{1}:%L - %m%n"  />
		</layout>
	</appender>
	
	
	<!-- 파일형태로 출력하기 -->
	<!-- RollingFileAppender클래스는  하루단위로  로그정보를 파일로 출력하기 -->
	<appender name="monitor" class="org.apache.log4j.RollingFileAppender">  
        <param name="append" value="false" /> <!-- 기존 로그파일을 지우고 새로 생성 --> 
        <param name="maxFileSize" value="10KB" /> <!-- 파일의 최대크기 설정 --> 
        <param name="maxBackupIndex" value="5" /> <!-- 생성할 백업 파일수 설정.기본1 --> 
        <param name="file" value="c:/logs/monitor.log" /> <!--파일 경로 및 이름 설정  --> 
        <layout class="org.apache.log4j.PatternLayout"> <!-- 출력형식 설정 --> 
            <param name="ConversionPattern" value="%d{yyyy-MM-dd HH:mm:ss} %-5p %c{1}:%L - %m%n" />  
        </layout>  
        <filter class="org.apache.log4j.varia.LevelRangeFilter"> 
            <param name="LevelMin" value="warn" />  <!-- 최하위 로깅레벨설정 -->
            <param name="LevelMax" value="warn" />  <!-- 최상위 로깅레벨설정 -->
        </filter> 
    </appender>  
	
	
	<!-- Application Loggers -->
<!--<logger name="실제 로그 기능을 수행하는 객체"> -->
	<logger name="com.mycompany">
		<!--  로그출력여부는 레벨에 따라 결정된다. 
		여기에서는 info레벨수준으로 결정
		 레벨은 TRACE<DEBUG<INFO<WARN<ERROR<FATAL 순으로 레벨이 높다.
		예) INFO레벨 이상으로 출력을 원하면 INFO,WARN,ERROR,FATAL로그까지 출력 -->
		<level value="info" />
		<appender-ref ref="monitor"/> 
	</logger>
	
	<!-- 3rdparty Loggers -->
	<logger name="org.springframework.core">
		<level value="info" />
	</logger>
	
	<logger name="org.springframework.beans">
		<level value="info" />
	</logger>
	
	<logger name="org.springframework.context">
		<level value="info" />
	</logger>

	<logger name="org.springframework.web">
		<level value="info" />
	</logger>

	<!-- Root Logger : 최상위로거  -->
	<root>
		<priority value="warn" />
		<appender-ref ref="console" />
	</root>
	
</log4j:configuration>









